async function assignPositions(inputMembers) {
  const stage = document.getElementById('stage-select')?.value || 'kokokarada';

  const positionsRes = await fetch(`data/${stage}/positions.json`);
  const positions = await positionsRes.json();

  const experienceRes = await fetch(`data/${stage}/experience.json`);
  const experienceData = await experienceRes.json();

  const firstDayMembersSet = new Set(positions.map(pos => pos.firstDayMember));
  const allExperiencedMembers = Object.values(experienceData).flat();
  const experienceCountMap = {};
  allExperiencedMembers.forEach(name => {
    experienceCountMap[name] = (experienceCountMap[name] || 0) + 1;
  });

  // Êï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
  for (const member of inputMembers) {
    if (!firstDayMembersSet.has(member) && !experienceCountMap[member]) {
      throw new Error(`„Éá„Éº„ÇøÊï¥ÂêàÊÄß„Ç®„É©„Éº: "${member}" „ÅØÂàùÊó•„É°„É≥„Éê„Éº„Å´„ÇÇÁµåÈ®ìËÄÖ„Å´„ÇÇÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ`);
    }
  }

  // „Çπ„Ç≥„Ç¢‰ªò„ÅçÂÄôË£ú„É™„Çπ„Éà‰ΩúÊàê
  const combinations = [];
  positions.forEach((pos, posIndex) => {
    const baseName = pos.firstDayMember;
    const experienced = experienceData[baseName] || [];

    inputMembers.forEach((member, memberIndex) => {
      let score = 0;
      const isFirstDay = baseName === member;
      const isExperienced = experienced.includes(member);
      const totalExp = experienceCountMap[member] || 0;

      if (isFirstDay && totalExp === 0) {
        score = 100;
      } else if (isExperienced && totalExp === 1) {
        score = 75;
      } else if (isFirstDay || isExperienced) {
        let relevantCount = 0;
        positions.forEach(p => {
          const fn = p.firstDayMember;
          const exp = experienceData[fn] || [];
          if (fn === member || exp.includes(member)) relevantCount++;
        });
        score = relevantCount === 1 ? 50 : 49;
      } else {
        score = 25;
      }

      combinations.push({
        positionName: pos.name,
        member,
        score,
        posIndex,
        memberIndex
      });
    });
  });

  // ‚ë† ‚ë° „Çπ„Ç≥„Ç¢100„Éª75 „ÅÆÂâ≤„ÇäÂΩì„Å¶
  combinations.sort((a, b) => {
    if (b.score !== a.score) return b.score - a.score;
    if (a.posIndex !== b.posIndex) return a.posIndex - b.posIndex;
    return a.memberIndex - b.memberIndex;
  });

  const usedPositions = new Set();
  const usedMembers = new Set();
  const assignmentMap = {};

  for (const combo of combinations) {
    if ((combo.score === 100 || combo.score === 75) &&
        !usedPositions.has(combo.positionName) && !usedMembers.has(combo.member)) {
      assignmentMap[combo.positionName] = {
        member: combo.member,
        score: combo.score
      };
      usedPositions.add(combo.positionName);
      usedMembers.add(combo.member);
    }
  }

  // üîç „Çπ„Ç≥„Ç¢49„Éª50„ÅÆ„Éù„Ç∏„Ç∑„Éß„É≥ÂÄôË£úÊäΩÂá∫
  const score50Combos = combinations.filter(
    c => (c.score === 50 || c.score === 49) &&
         !usedPositions.has(c.positionName) &&
         !usedMembers.has(c.member)
  );

  // „Éù„Ç∏„Ç∑„Éß„É≥„Åî„Å®„ÅÆÂÄôË£ú„Çí„Åæ„Å®„ÇÅ„Çã
  const posToCandidates = {};
  score50Combos.forEach(c => {
    if (!posToCandidates[c.positionName]) posToCandidates[c.positionName] = [];
    posToCandidates[c.positionName].push(c.member);
  });

  // „É°„É≥„Éê„Éº„Åî„Å®„ÅÆË©≤ÂΩì„Éù„Ç∏„Ç∑„Éß„É≥Êï∞
  const memberToPositions = {};
  score50Combos.forEach(c => {
    if (!memberToPositions[c.member]) memberToPositions[c.member] = new Set();
    memberToPositions[c.member].add(c.positionName);
  });

  // ÂÄôË£ú„Çí„Åß„Åç„Çã„Å†„ÅëÁ∂∫È∫ó„Å´Ââ≤„ÇäÂΩì„Å¶
  const assignedPos = new Set([...usedPositions]);
  const assignedMem = new Set([...usedMembers]);

  Object.entries(posToCandidates).forEach(([positionName, candidates]) => {
    // ÂÄôË£ú„ÇíË©≤ÂΩì„Éù„Ç∏„Ç∑„Éß„É≥Êï∞„ÅÆÂ∞ë„Å™„ÅÑÈ†Ü„Å´„ÇΩ„Éº„Éà
    candidates.sort((a, b) => {
      return (memberToPositions[a].size - memberToPositions[b].size);
    });

    for (const candidate of candidates) {
      if (!assignedMem.has(candidate) && !assignedPos.has(positionName)) {
        assignmentMap[positionName] = {
          member: candidate,
          score: 49
        };
        assignedMem.add(candidate);
        assignedPos.add(positionName);
        break;
      }
    }
  });

  // ÊÆã„ÇäÔºà„Çπ„Ç≥„Ç¢25„Å™„Å©Ôºâ„ÇíÂâ≤„ÇäÂΩì„Å¶
  for (const combo of combinations) {
    if (!assignmentMap[combo.positionName] &&
        !assignedMem.has(combo.member) &&
        combo.score <= 49) {
      assignmentMap[combo.positionName] = {
        member: combo.member,
        score: combo.score
      };
      assignedMem.add(combo.member);
    }
  }

  // ÊúÄÁµÇÂΩ¢Âºè„Å´Êï¥„Åà„Å¶ËøîÂç¥
  return positions.map(pos => {
    if (assignmentMap[pos.name]) {
      return {
        positionName: pos.name,
        member: assignmentMap[pos.name].member,
        score: assignmentMap[pos.name].score
      };
    } else {
      return {
        positionName: pos.name,
        member: '‚Äï',
        score: 0
      };
    }
  });
}